generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model demo {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message String @db.VarChar(255)
}

model User {
  id                  String    @id @default(uuid())
  first_name          String    
  last_name           String    
  email               String    @unique
  mobile              String?
  password            String
  profile_pic         String?   
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  is_mobile_verified  Boolean   @default(false)
  is_email_verified   Boolean   @default(false)
  is_profile_completed Boolean  @default(false)
  is_account_deleted  Boolean   @default(false)
  is_account_suspended Boolean  @default(false)
  google_id           String?   @unique
  username            String    @unique
  bio                 String?
  flags               Flag[]    // Relation to flags created by this user
  projects            Project[] // Relation to projects created by this user

  @@map("users")
}

model Project {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(100)
  description String    @db.VarChar(500)
  logo        String?
  created_by  String    // Foreign key to User
  created_by_user User  @relation(fields: [created_by], references: [id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  flags       Flag[]    // Relation to flags in this project
  environments Environment[] // Relation to environments

  @@map("projects")
}

model Environment {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(50)
  project_id  String    // Foreign key to Project
  project     Project   @relation(fields: [project_id], references: [id])
  flags       Flag[]    // Relation to flags in this environment
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@unique([name, project_id])  // Ensure environment names are unique within a project
  @@map("environments")
}

model Flag {
  id             String      @id @default(uuid())
  name           String      @db.VarChar(100)
  description    String      @db.VarChar(500)
  key            String      @db.VarChar(100)
  project_id     String      // Foreign key to Project
  project        Project     @relation(fields: [project_id], references: [id])
  environment_id String      // Foreign key to Environment
  environment    Environment @relation(fields: [environment_id], references: [id])
  is_active      Boolean     @default(false)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  expires_at     DateTime?   // Optional expiration time
  added_by       String      // Foreign key to User
  added_by_user  User        @relation(fields: [added_by], references: [id])

  @@unique([key, project_id, environment_id])  // Ensure keys are unique within a project-environment combination
  @@map("flags")
}